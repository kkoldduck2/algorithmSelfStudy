package trees_graphs;

/*
<Heap 이란?>
최대값이나 최소값을 찾아내는 연산을 빠르게 하기위해 고안된
완전 이진트리를 기본으로한 자료구조

1) Min Heap : 작은 값을 항상 위에 있게 함 -> tree의 root에 최소값이 오도록
2) Max Heap : 큰 값을 항상 위에 있게 함 -> root에 최대값이 오도록


<최소 힙에 노드 삽입>
1. 완전 트리의 맨 끝에 노드를 추가한다. (이때 complete binary 의 형태를 잃지 않도록, 마지막 레벨의 왼쪽부터 채워나간다.)
2. (정렬) 자신의 부모노드와 비교 -> 자기가 더 작으면 부모 노드와 자리를 바꾼다. 
	부모 노드의 값이 자기보다 작을 때까지 or 노드가 root에 도달 할때 까지 계속 반복한다.
	
* 이때 시간 복잡도는 O(log n) : 완전 binary 형태이므로 한 레벨 씩 올라갈때마다 찾아야 하는 대상이 절반씩 없어짐 

<최소 힙에서 노드 꺼내오기>
당연히 가장 작은 값(root)을 꺼낼 것이다. 그러려고 만든거니까
문제는 root의 값을 꺼내면 그 자리가 비어있게 된다. 
따라서 완전 이진 트리의 맨 마지막 노드를 가져와서 root를 채운다 (당연히 정렬 안맞는다)
이제 정렬을 맞춰줘야한다.
-> 자신의 자식 노드와 비교해서 자기보다 작은 놈과 자리를 바꾼다.
-> 자식이 둘이니까 둘 다 비교해서 둘 중에 더 작은 얘를 위로 보내야한다.
-> (종료) 자식이 자기보다 크거나 or 맨 마지막 잎사귀(leaf)에 도달하면 종료한다. 

* 시간 복잡도는 O(log n) : 마찬가지로 한번 작동할 때마다 가야할 길이 절반씩 떨어짐
*/

/*
<Trie(트라이) Tree>
트라이는 특별히 문자열에서 검색을 빠르게 해주는 트리구조이다.
 
 */
public class BinaryHeaps {

}
